serialization = require("serialization")
component = require("component")
event = require("event")
shared = require("shared")
term = require("term")

me = component.me_controller
chest = component.chest

configFile = "config"
hashesFile = "hashes"

Phrases = {
	hashInput = "Please enter type, gain, growth and resistance",
	willBeAdded = "Will be added:",
	missedHash = "No hash for specified attributes"
}

cropsHandler = {
	configuration = {},
	printNewDb = false,
	printNewNbt = false,
	dbHashes = {}, -- Connects hashes generated by database with seeds attributes. Uses like temporal id.
	nbtHashes = {} -- Connects nbt hashes with seeds attributes. USes like primary stable id.
}

function cropsHandler:init()
	cropsHandler:updateConfig()
	cropsHandler.nbtHashes = shared:loadFrom(hashesFile)
end

function cropsHandler:saveHashes()
	shared:saveTo(hashesFile, cropsHandler.nbtHashes)
end

function cropsHandler:exportNextUnhandled()
	local items = me.getAvailableItems()
	for item in items do
		local details = me.getItemDetail(item.fingerprint)           
		if details.display_name ~= unknownLabel then goto continue end
		local hash = details.nbt_hash
		if cropsHandler.nbtHashes[hash] == nil then

			return
		end

		::continue::
	end
end

function cropsHandler:parseParameters(str)
	local parts = {}
	for part in string.gmatch(str, "([^ ]+)") do  
    	parts[#parts + 1] = part
   	end 

    local shorters = cropsHandler.configuration.shorters
    local shortKind = parts[1]
    local kind = shorters[shortKind] or shortKind
    local growth = tonumber(parts[2]) or 0
    local gain = tonumber(parts[3]) or 0
    local resistance = tonumber(parts[4]) or 0

    return {kind = kind, ga = gain, gr = growth, re = resistance}
end

function cropsHandler:addHash(hash)
	if hash == nil then
		local stack = chest.getStackInSlot(1)
		hash = stack.nbt_hash
	end
	
	print(Phrases.hashInput)

	local input = term.read()
	local params = cropsHandler:parseParameters(input)

    print(Phrases.willBeAdded .. " " .. hash .. " " .. params.kind .. " " .. tostring(params.gr) .. " " .. tostring(params.ga) .. " " .. tostring(params.re))

    cropsHandler.nbtHashes[hash] = params
	cropsHandler:saveHashes()
end

function cropsHandler:updateConfig()
    cropsHandler.configuration = shared:loadFrom(configFile)
end

function isEqual(params1, params2)
	if params1.kind ~= params2.kind then return false end
	if params1.ga ~= params2.ga then return false end
	if params1.ge ~= params2.ge then return false end
	if params1.re ~= params2.re then return false end
	return true
end

function cropsHandler:getCount(paramsString)
	local params = cropsHandler:parseParameters(paramsString)

	local nbtHash = nil
	for hash, hashParams in pairs(cropsHandler.nbtHashes) do
		if isEqual(params, hashParams) then
			nbtHash = hash
		end
	end

	if nbtHash == nil then return nil end

	local items = me.getAvailableItems()
	for _, item in pairs(items) do
		if item.fingerprint.nbt_hash == nbtHash then
			local details = me.getItemDetail(item.fingerprint).all()
			for k,v in pairs(details) do print (k,v) end
			return details.qty
		end
	end
	return 0
end

function cropsHandler:startObserving(kinds)
	kinds = kinds or cropsHandler.configuration.oservable

	local g1sums = {}
	local g2sums = {}

	local g3sums = {}
	local sums = {[62] = g1sums, [61] = g2sums, [60] = g3sums}

	local items = me.getAvailableItems()
	for _, item in pairs(items) do
		local nbtHash = item.fingerprint.nbt_hash
		local params = cropsHandler.nbtHashes[nbtHash]
		if params == nil then goto continue end

		local valuability = params.ga + params.gr
		print("Value: " .. valuability)
		if  valuability < 60 then goto continue end

		local details = me.getItemDetail(item.fingerprint).all()
		local gradeSums = sums[valuability]
		local sum = gradeSums[params.kind] or 0
		gradeSums[params.kind] = sum + details.qty

		::continue::
	end

	for valuability, gradesSums in pairs(sums) do
		for kind, sum in pairs(gradesSums) do
			print(kind .. " " .. valuability .. " " .. sum)
		end
	end
end

cropsHandler:init()

return cropsHandler